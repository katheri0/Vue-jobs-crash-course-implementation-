Next Step :
making real api instead of mocking one ...
we start with making database structure 

database improvment and creation:
improving the Job.json data and making tables/entity and their relationships..
database structure:
users
 ├── id (PK)
 ├── name
 ├── email
 ├── password_hash
 ├── role_id (FK → roles.id)
 └── created_at

roles
 ├── id (PK)
 └── name  // e.g., admin, recruiter, seeker

companies
 ├── id (PK)
 ├── user_id (FK → users.id)  // owner/recruiter
 ├── name
 ├── description
 ├── contact_email
 ├── contact_phone
 └── created_at

jobs
 ├── id (PK)
 ├── company_id (FK → companies.id)
 ├── title
 ├── type
 ├── description
 ├── location
 ├── salary
 └── created_at

categories
 ├── id (PK)
 └── name

job_category
 ├── job_id (FK → jobs.id)
 ├── category_id (FK → categories.id)
(PK = composite of job_id + category_id)

applications
 ├── id (PK)
 ├── user_id (FK → users.id)
 ├── job_id (FK → jobs.id)
 ├── status  // e.g., pending, accepted, rejected
 └── applied_at

company_reviews
 ├── id (PK)
 ├── company_id (FK → companies.id)
 ├── user_id (FK → users.id)
 ├── rating (1–5)
 ├── review_text
 └── created_at

relationships:

users
  ├── hasMany(companies)                 // One recruiter can own many companies
  ├── hasMany(applications)               // One user can apply to many jobs
  ├── hasMany(company_reviews)            // One user can review many companies
  └── belongsTo(roles)                    // Each user has one role

roles
  └── hasMany(users)                      // One role applies to many users

companies
  ├── belongsTo(users)                    // Company owned/managed by one user
  ├── hasMany(jobs)                       // One company can post many jobs
  └── hasMany(company_reviews)             // One company can have many reviews

jobs
  ├── belongsTo(companies)                // Job belongs to one company
  ├── hasMany(applications)               // One job can have many applications
  ├── belongsToMany(categories)           // Many-to-many via job_category
  └── hasMany(job_category)               // Pivot table link

categories
  └── belongsToMany(jobs)                 // Many-to-many via job_category

job_category
  ├── belongsTo(jobs)                     // FK to job
  └── belongsTo(categories)               // FK to category

applications
  ├── belongsTo(users)                    // Applicant user
  └── belongsTo(jobs)                     // Job applied to

company_reviews
  ├── belongsTo(users)                    // Reviewer
  └── belongsTo(companies)                // Company being reviewed

