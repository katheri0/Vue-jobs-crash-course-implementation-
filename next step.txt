Next Step :
making real api instead of mocking one ...
we start with making database structure 

database improvment and creation:
improving the Job.json data and making tables/entity and their relationships..
database structure:
users
 ├── id (PK)
 ├── name
 ├── email
 ├── password_hash
 ├── role_id (FK → roles.id)
 └── created_at

roles
 ├── id (PK)
 └── name  // e.g., admin, recruiter, seeker

companies
 ├── id (PK)
 ├── user_id (FK → users.id)  // owner/recruiter
 ├── name
 ├── description
 ├── contact_email
 ├── contact_phone
 └── created_at

jobs
 ├── id (PK)
 ├── company_id (FK → companies.id)
 ├── title
 ├── type
 ├── description
 ├── location
 ├── salary
 └── created_at

categories
 ├── id (PK)
 └── name

job_category
 ├── job_id (FK → jobs.id)
 ├── category_id (FK → categories.id)
(PK = composite of job_id + category_id)

applications
 ├── id (PK)
 ├── user_id (FK → users.id)
 ├── job_id (FK → jobs.id)
 ├── status  // e.g., pending, accepted, rejected
 └── applied_at

company_reviews
 ├── id (PK)
 ├── company_id (FK → companies.id)
 ├── user_id (FK → users.id)
 ├── rating (1–5)
 ├── review_text
 └── created_at

relationships:

users
  ├── hasMany(companies)                 // One recruiter can own many companies
  ├── hasMany(applications)               // One user can apply to many jobs
  ├── hasMany(company_reviews)            // One user can review many companies
  └── belongsTo(roles)                    // Each user has one role

roles
  └── hasMany(users)                      // One role applies to many users

companies
  ├── belongsTo(users)                    // Company owned/managed by one user
  ├── hasMany(jobs)                       // One company can post many jobs
  └── hasMany(company_reviews)             // One company can have many reviews

jobs
  ├── belongsTo(companies)                // Job belongs to one company
  ├── hasMany(applications)               // One job can have many applications
  ├── belongsToMany(categories)           // Many-to-many via job_category
  └── hasMany(job_category)               // Pivot table link

categories
  └── belongsToMany(jobs)                 // Many-to-many via job_category

job_category
  ├── belongsTo(jobs)                     // FK to job
  └── belongsTo(categories)               // FK to category

applications
  ├── belongsTo(users)                    // Applicant user
  └── belongsTo(jobs)                     // Job applied to

company_reviews
  ├── belongsTo(users)                    // Reviewer
  └── belongsTo(companies)                // Company being reviewed


Briefly Explain Tables :

users → All registered people; stores login and identity info.
roles → Defines whether a user is an admin, recruiter, or seeker.
companies → Organizations recruiters create to post jobs.
jobs → Vacancies posted under companies.
categories → Tags/classifications for jobs.
job_category → Links jobs to categories (many-to-many).
applications → Records when a seeker applies to a job.
company_reviews → Feedback and ratings from users about companies.


 
Functional Requirements (MVP)

User Management
Users can register/login.

Roles define permissions:
Seeker → browse jobs, apply, review companies.
Recruiter → create/manage companies, post jobs.
Admin → manage users, companies, and jobs.

Company Management
Recruiters can create and manage companies.
Companies have descriptions, contact details.

Job Management
Recruiters can post jobs for their companies.
Jobs have title, type, description, location, salary.
Jobs can be tagged with one or more categories.

Applications
Seekers can apply to jobs.
Applications have a status (pending, accepted, rejected).

Company Reviews
Users can leave reviews (rating + text) for companies.
Companies can have multiple reviews.
__________________________________________________________

Future Extensions (document only, not build now):

user_profiles (optional, seeker-specific CV/skills later).
saved_jobs (optional, seekers can bookmark jobs).
recruiter_profiles (optional, recruiter verification info).
job_invitations (optional, recruiters invite seekers).
admin_logs (optional, track admin moderation).